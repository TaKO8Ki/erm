name: Benchmark

on:
  push:
    branches:
      - benchmark

jobs:
  build_linux_binary:
    name: Build Linux binary
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: stable
            target: x86_64-unknown-linux-musl
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Use Cross
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build static binary
      run: ${{ env.CARGO }} build ${{ env.TARGET_FLAGS }} --verbose --release

    - uses: actions/upload-artifact@v2
      with:
        name: frum-linux
        path: target/x86_64-unknown-linux-musl/release/frum
  
  benchmark_init_on_linux:
    name: Benchmark init (Linux)
    needs: [build_linux_binary]
    runs-on: ubuntu-latest
    steps:
      - uses: octokit/request-action@v2.x
        id: get_benchmark_workflows
        with:
          route: GET /repos/:repository/actions/runs
          repository: ${{ github.repository }}
          branch: benchmark
          status: completed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/:repository/releases/latest
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Take the output
        run: |
          URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.assets | map(select(.name | endswith("x86_64-unknown-linux-musl.tar.gz"))) | .[0].browser_download_url')
          echo $URL
          curl -L $URL -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' > /tmp/frum-latest.tar.gz
          mkdir ~/.frum-latest
          tar -zxvf /tmp/frum-latest.tar.gz -C ~/.frum-latest --strip-components=1
          ls -lah ~/.frum-latest
      - uses: actions/checkout@v2
      - name: Install hyperfine
        run: |
          wget https://github.com/sharkdp/hyperfine/releases/download/v1.10.0/hyperfine_1.10.0_amd64.deb
          sudo dpkg -i hyperfine_1.10.0_amd64.deb
      - name: Install rbenv
        run: |
          git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
          git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
      - uses: actions/download-artifact@v2
        with:
          name: frum-linux
          path: target/release/
      - name: Run benchmarks
        run: ./benchmarks/run_init

      - run: lscpu

      - name: Read basic.md for the generated report
        id: basic_result
        uses: juliangruber/read-file-action@v1
        with:
          path: benchmarks/results/basic.md

      - uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/commits/:commit_sha/comments
          repository: ${{ github.repository }}
          commit_sha: ${{ github.sha }}
          body: |
            |
            ${{ steps.basic_result.outputs.content }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  benchmark_all_on_linux:
    name: Benchmark all (Linux)
    needs: [build_linux_binary]
    runs-on: ubuntu-latest
    steps:
      - uses: octokit/request-action@v2.x
        id: get_benchmark_workflows
        with:
          route: GET /repos/:repository/actions/runs
          repository: ${{ github.repository }}
          branch: benchmark
          status: completed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/:repository/releases/latest
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Take the output
        run: |
          URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.assets | map(select(.name | endswith("x86_64-unknown-linux-musl.tar.gz"))) | .[0].browser_download_url')
          echo $URL
          curl -L $URL -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' > /tmp/frum-latest.tar.gz
          mkdir ~/.frum-latest
          tar -zxvf /tmp/frum-latest.tar.gz -C ~/.frum-latest --strip-components=1
          ls -lah ~/.frum-latest
      - uses: actions/checkout@v2
      - name: Install hyperfine
        run: |
          wget https://github.com/sharkdp/hyperfine/releases/download/v1.10.0/hyperfine_1.10.0_amd64.deb
          sudo dpkg -i hyperfine_1.10.0_amd64.deb
      - name: Install rbenv
        run: |
          git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
          git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
      - uses: actions/download-artifact@v2
        with:
          name: frum-linux
          path: target/release/
      - name: Run benchmarks
        run: ./benchmarks/run

      - run: lscpu

      - name: Read basic.md for the generated report
        id: basic_result
        uses: juliangruber/read-file-action@v1
        with:
          path: benchmarks/results/basic.md

      - uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/commits/:commit_sha/comments
          repository: ${{ github.repository }}
          commit_sha: ${{ github.sha }}
          body: |
            |
            ${{ steps.basic_result.outputs.content }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
